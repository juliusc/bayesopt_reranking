import argparse
from pathlib import Path
import h5py
from tqdm import tqdm
import utils

import torch
import torch.nn.functional as F
import logging
import time

# Set up logging to log to a file and the console
logger = logging.getLogger()  # Use root logger
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler('log_sim_calculation.log', mode='a')
file_handler.setLevel(logging.INFO)
# console_handler = logging.StreamHandler()
# console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
# console_handler.setFormatter(formatter)
logger.addHandler(file_handler)
# logger.addHandler(console_handler)

def main(args):
    logger.info("Starting the main function.")
    

    # for split in "dev", "test_small":
    for split in ["test"]:
        split_start_time = time.time()  # Time for this specific split

        split_work_dir = Path(args.work_dir) / split

        with (h5py.File((split_work_dir / utils.CANDIDATES_FILENAME).with_suffix(".h5")) as cand_h5,
              h5py.File((split_work_dir / (utils.SIMILARITIES_FILENAME_BASE + "_cosine")).with_suffix(".h5"), "w") as sim_h5):
            
            emb_h5ds = cand_h5[utils.CANDIDATES_EMBEDDINGS_H5DS_NAME]

            # start timing here
            start_time = time.time()  # Start global timing
            sim_h5ds = sim_h5.create_dataset(
                utils.SIMILARITIES_H5DS_NAME,
                (emb_h5ds.shape[0],),
                utils.H5_VLEN_FLOAT_DTYPE)

            logger.info(f"Processing {emb_h5ds.shape[0]} embeddings...")

            embeddings_processing_start_time = time.time()  # Time for processing embeddings

            for idx, emb in enumerate(tqdm(emb_h5ds)):
                emb = F.normalize(torch.tensor(emb))
                sims = torch.matmul(emb, emb.T)
                sim_h5ds[idx] = sims.reshape(-1)





    logger.info(f"Main function completed in {time.time() - start_time:.2f} seconds.")



if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    # parser.add_argument(
    #     "data_dir", help="Data directory generated by the pipeline from vilem/scripts.")

    parser.add_argument(
        "work_dir", help="Working directory for all steps. "
                         "Will be created if doesn't exist.")

    parser.add_argument(
        "--seed", type=int, default=0, help="Random seed.")

    args = parser.parse_args()
    main(args)

# python efficient_reranking/runtime_scripts/get_runtime_similarities.py efficient_reranking/runtime_scripts